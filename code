# Install dependencies
!pip install gradio scikit-learn joblib matplotlib --quiet

import gradio as gr
import numpy as np
import cv2
import time
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import joblib

# Load MNIST dataset
mnist = fetch_openml('mnist_784', version=1)
X, y = mnist.data, mnist.target.astype(int)

# Reduce dataset to 1000 samples (100 per digit) for fast training
X_train, _, y_train, _ = train_test_split(X, y, train_size=1000, stratify=y, random_state=42)

# Train an SVM model with better settings
svm_model = SVC(kernel="rbf", gamma="scale")
svm_model.fit(X_train, y_train)

# Save trained model
joblib.dump(svm_model, "svm_model.pkl")

# Load trained model
svm_model = joblib.load("svm_model.pkl")

# Function to predict & visualize the output
def predict_image(image):
    start_time = time.time()  # Start timing

    # Convert image to grayscale if needed
    if len(image.shape) == 3:
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    else:
        gray = image

    # Resize to 28x28
    gray = cv2.resize(gray, (28, 28), interpolation=cv2.INTER_AREA)

    # Normalize and flatten
    gray = gray / 255.0
    input_data = gray.flatten().reshape(1, -1)

    # Make prediction
    predicted_digit = svm_model.predict(input_data)[0]  # Model predicts the actual digit

    end_time = time.time()
    processing_time = round(end_time - start_time, 2)  # Time taken

    # Create an output image with the prediction label
    fig, ax = plt.subplots()
    ax.imshow(gray, cmap="gray")
    ax.set_title(f"Predicted Digit: {predicted_digit}", fontsize=14, color="red")
    ax.axis("off")

    # Save the image
    output_path = "output_prediction.png"
    plt.savefig(output_path, bbox_inches="tight")
    plt.close()

    return output_path, f"Predicted Digit: {predicted_digit} (Processed in {processing_time} sec)"

# Define Gradio Interface
interface = gr.Interface(
    fn=predict_image,
    inputs=gr.Image(image_mode="L", type="numpy"),
    outputs=["image", "text"],
    title="Handwritten Digit Recognition",
    description="Upload a handwritten digit image and get the predicted number (0-9)."
)

# Launch Gradio App
interface.launch(share=True)
